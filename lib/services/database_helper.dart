import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'dart:math';

class DatabaseHelper {
  static const _databaseName = "FungjaiApp.db";
  static const _databaseVersion = 1;

  // Singleton pattern
  DatabaseHelper._privateConstructor();
  static final DatabaseHelper instance = DatabaseHelper._privateConstructor();

  static Database? _database;
  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  _initDatabase() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, _databaseName);
    return await openDatabase(path,
        version: _databaseVersion,
        onCreate: _onCreate);
  }

  Future _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE question_sets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        set_name TEXT NOT NULL
      )
    ''');

    await db.execute('''
      CREATE TABLE questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        set_id INTEGER NOT NULL,
        question_text TEXT NOT NULL,
        FOREIGN KEY (set_id) REFERENCES question_sets (id)
      )
    ''');

    await db.execute('''
      CREATE TABLE emotion_records (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        timestamp TEXT NOT NULL,
        question_id INTEGER,
        audio_path TEXT NOT NULL,
        detected_emotion TEXT NOT NULL,
        confidence REAL,
        FOREIGN KEY (question_id) REFERENCES questions (id)
      )
    ''');
    
    await _insertInitialData(db);
  }
  
  Future<void> _insertInitialData(Database db) async {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    final questionSets = [
      '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å',
      '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç', 
      '‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
      '‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô'
    ];

    final questions = [
      // ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 1: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å
      [
        "‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
        "‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡πÑ‡∏õ‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£?", 
        "‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©?",
        "‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏´‡∏°? ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢",
        "‡∏´‡∏≤‡∏Å‡∏¢‡πâ‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô?"
      ],
      // ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 2: ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
      [
        "‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï?",
        "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≥‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏Ç‡∏≤?",
        "‡∏°‡∏µ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡πÑ‡∏´‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ?", 
        "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡πÄ‡∏Ç‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏π‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏Ç‡∏≤?"
      ],
      // ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 3: ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï
      [
        "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?",
        "‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏á? ‡∏Å‡∏•‡∏±‡∏ß ‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á?",
        "‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
        "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏ö‡πâ‡∏≤‡∏á?",
        "‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏´‡∏°?"
      ],
      // ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà 4: ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô
      [
        "‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô? ‡∏à‡∏≥‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?",
        "‡∏°‡∏∑‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏°‡∏∑‡πâ‡∏≠‡πÑ‡∏´‡∏ô?",
        "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô?",
        "‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏¢‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ö‡πâ‡∏≤‡∏á?",
        "‡∏ñ‡πâ‡∏≤‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ \"‡∏ö‡πâ‡∏≤‡∏ô\" ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏Å?"
      ]
    ];

    // Insert question sets ‡πÅ‡∏•‡∏∞ questions
    for (int i = 0; i < questionSets.length; i++) {
      int setId = await db.insert('question_sets', {'set_name': questionSets[i]});
      
      for (String question in questions[i]) {
        await db.insert('questions', {
          'set_id': setId,
          'question_text': question
        });
      }
    }
  }

Future<List<String>> getRandomQuestionSet() async {
  try {
    print('üóÑÔ∏è DatabaseHelper: Getting database instance...');
    final db = await database;
    
    print('üóÑÔ∏è DatabaseHelper: Querying question_sets table...');
    final sets = await db.query('question_sets');
    print('üóÑÔ∏è DatabaseHelper: Found ${sets.length} question sets');
    
    if (sets.isEmpty) {
      print('‚ùå DatabaseHelper: No question sets found!');
      return [];
    }
    
    final randomSet = sets[Random().nextInt(sets.length)];
    final setId = randomSet['id'];
    final setName = randomSet['set_name'];
    print('üéØ DatabaseHelper: Selected set: $setName (ID: $setId)');
    
    print('üóÑÔ∏è DatabaseHelper: Querying questions for set $setId...');
    final questions = await db.query(
      'questions',
      where: 'set_id = ?',
      whereArgs: [setId],
      orderBy: 'id ASC'
    );
    
    print('üóÑÔ∏è DatabaseHelper: Found ${questions.length} questions');
    
    final questionList = questions.map((q) => q['question_text'] as String).toList();
    print('‚úÖ DatabaseHelper: Returning questions: ${questionList.length}');
    
    return questionList;
  } catch (e) {
    print('‚ùå DatabaseHelper: Error in getRandomQuestionSet: $e');
    rethrow;
  }
} 

  // Helper methods
  Future<int> insert(String table, Map<String, dynamic> row) async {
    Database db = await instance.database;
    return await db.insert(table, row);
  }

  Future<List<Map<String, dynamic>>> queryAllRows(String table) async {
    Database db = await instance.database;
    return await db.query(table);
  }
}