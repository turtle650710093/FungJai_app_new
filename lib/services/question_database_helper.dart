import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class QuestionDatabaseHelper {
  static final QuestionDatabaseHelper _instance = QuestionDatabaseHelper._internal();
  static Database? _database;

  factory QuestionDatabaseHelper() => _instance;

  QuestionDatabaseHelper._internal();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    String path = join(await getDatabasesPath(), 'fungjai_questions.db');
    
    print('üì¶ QuestionDB: Initializing database at: $path');
    bool dbExists = await databaseExists(path);

    if (dbExists) {
      print('‚úÖ QuestionDB: Database already exists, opening...');
      return await openDatabase(path, version: 2); // ‡πÄ‡∏û‡∏¥‡πà‡∏° version
    }

    print('üìù QuestionDB: Creating new database...');
    
    return await openDatabase(
      path,
      version: 2,
      onCreate: _onCreate,
    );
  }

  Future<void> _onCreate(Database db, int version) async {
    print('üî® QuestionDB: Creating tables...');
    
    // ‚úÖ ‡∏•‡∏ö title ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà id
    await db.execute('''
      CREATE TABLE question_sets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        created_at TEXT NOT NULL
      )
    ''');

    await db.execute('''
      CREATE TABLE questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_set_id INTEGER NOT NULL,
        question_text TEXT NOT NULL,
        audio_path TEXT,
        order_number INTEGER NOT NULL,
        created_at TEXT NOT NULL,
        FOREIGN KEY (question_set_id) REFERENCES question_sets (id) ON DELETE CASCADE
      )
    ''');

    await db.execute('''
      CREATE INDEX idx_questions_set_id ON questions(question_set_id)
    ''');

    print('‚úÖ QuestionDB: Tables created');

    await _insertSampleDataOptimized(db);
  }

  Future<void> _insertSampleDataOptimized(Database db) async {
    print('üìù QuestionDB: Inserting sample data (optimized)...');
    
    final startTime = DateTime.now();
    final now = startTime.toIso8601String();

    await db.transaction((txn) async {
      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á 7 ‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ title)
      int set1Id = await txn.insert('question_sets', {'created_at': now});
      int set2Id = await txn.insert('question_sets', {'created_at': now});
      int set3Id = await txn.insert('question_sets', {'created_at': now});
      int set4Id = await txn.insert('question_sets', {'created_at': now});
      int set5Id = await txn.insert('question_sets', {'created_at': now});
      int set6Id = await txn.insert('question_sets', {'created_at': now});
      int set7Id = await txn.insert('question_sets', {'created_at': now});

      final batch = txn.batch();

      // Set 1
      List<Map<String, String>> questions1 = [
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡πÜ ‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/1.1.m4a',
        },
        {
          'text': '‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≤‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô ‡∏ä‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/1.2.m4a',
        },
        {
          'text': '‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡∏î‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/1.3.m4a',
        },
        {
          'text': '‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? ‡∏°‡∏µ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/1.4.m4a',
        },
        {
          'text': '‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏≠‡∏∏‡πà‡∏ô ‡πÜ ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡πÅ‡∏ü‡∏´‡∏≠‡∏° ‡πÜ ‡∏ä‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/1.5.m4a',
        },
      ];

      for (int i = 0; i < questions1.length; i++) {
        batch.insert('questions', {
          'question_set_id': set1Id,
          'question_text': questions1[i]['text'],
          'audio_path': questions1[i]['audio'],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 2
      List<Map<String, String>> questions2 = [
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡∏∑‡πà‡∏ô‡∏°‡∏≤‡∏ó‡∏±‡∏ô‡∏î‡∏π‡πÅ‡∏î‡∏î‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡πâ‡∏≤‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/2.1.m4a',
        },
        {
          'text': '‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/2.2.m4a',
        },
        {
          'text': '‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢ ‡πÜ ‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ó‡∏≥‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/2.3.m4a',
        },
        {
          'text': '‡πÄ‡∏Ç‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡∏î‡∏∂‡∏Å‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏≠‡∏ô‡πÄ‡∏£‡πá‡∏ß?',
          'audio': 'assets/audio/2.4.m4a',
        },
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏à‡∏°‡∏±‡πâ‡∏¢‡∏Ñ‡∏∞~ ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°?',
          'audio': 'assets/audio/2.5.m4a',
        },
      ];

      for (int i = 0; i < questions2.length; i++) {
        batch.insert('questions', {
          'question_set_id': set2Id,
          'question_text': questions2[i]['text'],
          'audio_path': questions2[i]['audio'],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 3
      List<Map<String, String>> questions3 = [
        {
          'text': '‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏ß‡∏µ‡∏î‡∏π‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡∏ß‡∏µ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/3.1.m4a',
        },
        {
          'text': '‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÜ ‡∏ä‡∏≠‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ü‡∏±‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/3.2.m4a',
        },
        {
          'text': '‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/3.3.m4a',
        },
        {
          'text': '‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏ß‡∏ô‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô ‡∏≠‡∏¢‡∏≤‡∏Å‡∏õ‡∏•‡∏π‡∏Å‡∏î‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏ß‡πâ‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/3.4.m4a',
        },
        {
          'text': '‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß ‡∏à‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏î‡∏µ‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/3.5.m4a',
        },
      ];

      for (int i = 0; i < questions3.length; i++) {
        batch.insert('questions', {
          'question_set_id': set3Id,
          'question_text': questions3[i]['text'],
          'audio_path': questions3[i]['audio'],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 4
      List<Map<String, String>> questions4 = [
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏≠‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/4.1.m4a',
        },
        {
          'text': '‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÜ ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/4.2.m4a',
        },
        {
          'text': '‡∏õ‡∏Å‡∏ï‡∏¥‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏¥‡∏ï‡∏¢‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/4.3.m4a',
        },
        {
          'text': '‡∏ä‡∏≠‡∏ö‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏ß‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/4.4.m4a',
        },
        {
          'text': '‡∏°‡∏µ‡∏°‡∏∏‡∏°‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏ô‡∏±‡πà‡∏á‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/4.5.m4a',
        },
      ];

      for (int i = 0; i < questions4.length; i++) {
        batch.insert('questions', {
          'question_set_id': set4Id,
          'question_text': questions4[i]['text'],
          'audio_path': questions4[i]['audio'],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 5
      List<Map<String, String>> questions5 = [
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/5.1.m4a',
        },
        {
          'text': '‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏´‡∏•‡∏≤‡∏ô‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°? ‡∏Ñ‡∏á‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞',
          'audio': 'assets/audio/5.2.m4a',
        },
        {
          'text': '‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏¢‡∏î‡πâ‡∏ß‡∏¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏≤‡πÇ‡∏ó‡∏£‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ß‡∏∞‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Ç‡πâ‡∏≤‡∏á ‡πÜ ‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/5.3.m4a',
        },
        {
          'text': '‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏à‡∏≠‡∏•‡∏π‡∏Å‡∏´‡∏•‡∏≤‡∏ô‡∏ö‡πà‡∏≠‡∏¢ ‡πÜ ‡∏Ñ‡∏á‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÉ‡∏à‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/5.4.m4a',
        },
        {
          'text': '‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏π‡∏Å‡∏´‡∏•‡∏≤‡∏ô‡∏°‡∏≤‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏ô‡πâ‡∏≤ ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ô‡∏™‡∏ô‡∏∏‡∏Å ‡πÜ ‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/5.5.m4a',
        },
      ];

      for (int i = 0; i < questions5.length; i++) {
        batch.insert('questions', {
          'question_set_id': set5Id,
          'question_text': questions5[i]['text'],
          'audio_path': questions5[i]['audio'],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 6
      List<Map<String, String>> questions6 = [
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô‡∏î‡∏µ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/6.1.m4a',
        },
        {
          'text': '‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏¢‡∏∑‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏¢‡∏∑‡∏î‡∏™‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? ‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏î‡∏¥‡∏ô‡∏ô‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡πÄ‡∏≠‡πà‡∏¢',
          'audio': 'assets/audio/6.2.m4a',
        },
        {
          'text': '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏™‡∏ö‡∏≤‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/6.3.m4a',
        },
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡∏≠‡∏∞‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞? ‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡∏∑‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Å‡∏µ‡πà‡πÅ‡∏Å‡πâ‡∏ß?',
          'audio': 'assets/audio/6.4.m4a',
        },
        {
          'text': '‡∏¢‡∏≤‡∏Å‡πá‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏°‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?',
          'audio': 'assets/audio/6.5.m4a',
        },
      ];

      for (int i = 0; i < questions6.length; i++) {
        batch.insert('questions', {
          'question_set_id': set6Id,
          'question_text': questions6[i]['text'],
          'audio_path': questions6[i]['audio'],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 7
      List<Map<String, String>> questions7 = [
        {
          'text': '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/8.1.m4a',
        },
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/8.2.m4a',
        },
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/8.3.m4a',
        },
        {
          'text': '‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡∏ß‡∏±‡∏î ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡πÉ‡∏à‡∏î‡∏µ ‡πÜ ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏•‡∏¢~ ‡∏ä‡∏≠‡∏ö‡πÑ‡∏õ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/8.4.m4a',
        },
        {
          'text': '‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∞?',
          'audio': 'assets/audio/8.5.m4a',
        },
      ];

      for (int i = 0; i < questions7.length; i++) {
        batch.insert('questions', {
          'question_set_id': set7Id,
          'question_text': questions7[i]['text'],
          'audio_path': questions7[i]['audio'],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      await batch.commit(noResult: true);
    });

    final duration = DateTime.now().difference(startTime);
    print('‚úÖ QuestionDB: Inserted 35 questions in 7 sets in ${duration.inMilliseconds}ms');
  }

  /// ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° audio path (‡πÑ‡∏°‡πà‡∏°‡∏µ title ‡πÅ‡∏•‡πâ‡∏ß)
  Future<List<Map<String, dynamic>>> getRandomQuestionSetWithAudio() async {
    final db = await database;
    
    print('üé≤ QuestionDB: Fetching random question set with audio...');
    
    try {
      // ‚úÖ ‡πÄ‡∏≠‡∏≤ title ‡∏≠‡∏≠‡∏Å
      final setResult = await db.rawQuery('''
        SELECT id FROM question_sets 
        ORDER BY RANDOM() 
        LIMIT 1
      ''');

      if (setResult.isEmpty) {
        print('‚ùå QuestionDB: No question sets found');
        return [];
      }

      final setId = setResult.first['id'] as int;
      
      print('üìã QuestionDB: Selected set ID: $setId');

      final questions = await db.query(
        'questions',
        where: 'question_set_id = ?',
        whereArgs: [setId],
        orderBy: 'order_number ASC',
      );

      print('‚úÖ QuestionDB: Found ${questions.length} questions with audio');

      return questions;
      
    } catch (e) {
      print('‚ùå QuestionDB: Error fetching questions: $e');
      return [];
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏î
  Future<List<Map<String, dynamic>>> getQuestionsBySetId(int setId) async {
    final db = await database;
    return await db.query(
      'questions',
      where: 'question_set_id = ?',
      whereArgs: [setId],
      orderBy: 'order_number ASC',
    );
  }

  /// ‡∏î‡∏∂‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<Map<String, dynamic>>> getAllQuestionSets() async {
    final db = await database;
    return await db.query('question_sets', orderBy: 'id ASC');
  }

  Future<void> close() async {
    final db = await database;
    await db.close();
  }
}