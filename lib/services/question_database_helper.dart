import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class QuestionDatabaseHelper {
  static final QuestionDatabaseHelper _instance = QuestionDatabaseHelper._internal();
  static Database? _database;

  factory QuestionDatabaseHelper() => _instance;

  QuestionDatabaseHelper._internal();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    String path = join(await getDatabasesPath(), 'fungjai_questions.db');
    
    print('üì¶ QuestionDB: Initializing database at: $path');
    bool dbExists = await databaseExists(path);

    if (dbExists) {
      print('‚úÖ QuestionDB: Database already exists, opening...');
      return await openDatabase(path, version: 1);
    }

    print('üìù QuestionDB: Creating new database...');
    
    return await openDatabase(
      path,
      version: 1,
      onCreate: _onCreate,
    );
  }

  Future<void> _onCreate(Database db, int version) async {
    print('üî® QuestionDB: Creating tables...');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á question_sets
    await db.execute('''
      CREATE TABLE question_sets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        created_at TEXT NOT NULL
      )
    ''');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á questions (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á index)
    await db.execute('''
      CREATE TABLE questions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        question_set_id INTEGER NOT NULL,
        question_text TEXT NOT NULL,
        order_number INTEGER NOT NULL,
        created_at TEXT NOT NULL,
        FOREIGN KEY (question_set_id) REFERENCES question_sets (id) ON DELETE CASCADE
      )
    ''');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á index ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    await db.execute('''
      CREATE INDEX idx_questions_set_id ON questions(question_set_id)
    ''');

    print('‚úÖ QuestionDB: Tables created');

    await _insertSampleDataOptimized(db);
  }

  Future<void> _insertSampleDataOptimized(Database db) async {
    print('üìù QuestionDB: Inserting sample data (optimized)...');
    
    final startTime = DateTime.now();
    final now = startTime.toIso8601String();

    await db.transaction((txn) async {

      int set1Id = await txn.insert('question_sets', {
        'title': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏£‡∏á‡∏à‡∏≥‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å',
        'created_at': now,
      });

      int set2Id = await txn.insert('question_sets', {
        'title': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
        'created_at': now,
      });

      int set3Id = await txn.insert('question_sets', {
        'title': '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
        'created_at': now,
      });

      int set4Id = await txn.insert('question_sets', {
        'title': '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏ö‡πâ‡∏≤‡∏ô',
        'created_at': now,
      });

      int set5Id = await txn.insert('question_sets', {
        'title': '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏≠‡πÉ‡∏à‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
        'created_at': now,
      });

      int set6Id = await txn.insert('question_sets', {
        'title': '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡∏ï‡∏Å‡∏Å‡∏±‡∏á‡∏ß‡∏•',
        'created_at': now,
      });

      final batch = txn.batch();

      // Set 1
      List<String> questions1 = [
        '‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?',
        '‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ä‡∏≠‡∏ö‡πÑ‡∏õ‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£?',
        '‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©?',
        '‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏´‡∏°? ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥‡∏Ñ‡∏∞',
        '‡∏´‡∏≤‡∏Å‡∏¢‡πâ‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô? ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÑ‡∏°‡∏ñ‡∏∂‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô?',
      ];

      for (int i = 0; i < questions1.length; i++) {
        batch.insert('questions', {
          'question_set_id': set1Id,
          'question_text': questions1[i],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 2
      List<String> questions2 = [
        '‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ú‡∏π‡∏Å‡∏û‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï?',
        '‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≥‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏Ç‡∏≤?',
        '‡∏°‡∏µ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡πÑ‡∏´‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ?',
        '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡πÄ‡∏Ç‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?',
        '‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏π‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡πÄ‡∏Ç‡∏≤?',
      ];

      for (int i = 0; i < questions2.length; i++) {
        batch.insert('questions', {
          'question_set_id': set2Id,
          'question_text': questions2[i],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 3
      List<String> questions3 = [
        '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏à‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î?',
        '‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏á? ‡∏Å‡∏•‡∏±‡∏ß ‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á',
        '‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?',
        '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏ö‡πâ‡∏≤‡∏á?',
        '‡∏ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏´‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏∞‡πÑ‡∏£?',
      ];

      for (int i = 0; i < questions3.length; i++) {
        batch.insert('questions', {
          'question_set_id': set3Id,
          'question_text': questions3[i],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 4
      List<String> questions4 = [
        '‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô? ‡∏à‡∏≥‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°',
        '‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏°‡∏∑‡πâ‡∏≠‡πÑ‡∏´‡∏ô?',
        '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô?',
        '‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏¢‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏ö‡πâ‡∏≤‡∏á?',
        '‡∏ñ‡πâ‡∏≤‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏ö‡πâ‡∏≤‡∏ô" ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏ô‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏Å?',
      ];

      for (int i = 0; i < questions4.length; i++) {
        batch.insert('questions', {
          'question_set_id': set4Id,
          'question_text': questions4[i],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 5
      List<String> questions5 = [
        '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏û‡∏≠‡πÉ‡∏à‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ö‡πâ‡∏≤‡∏á?',
        '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏û‡∏≠‡πÉ‡∏à‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ?',
        '‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ?',
      ];

      for (int i = 0; i < questions5.length; i++) {
        batch.insert('questions', {
          'question_set_id': set5Id,
          'question_text': questions5[i],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // Set 6
      List<String> questions6 = [
        '‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°?',
        '‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏ö‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô?',
        '‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏≥‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?',
      ];

      for (int i = 0; i < questions6.length; i++) {
        batch.insert('questions', {
          'question_set_id': set6Id,
          'question_text': questions6[i],
          'order_number': i + 1,
          'created_at': now,
        });
      }

      // ‚úÖ Commit batch
      await batch.commit(noResult: true);
    });

    final duration = DateTime.now().difference(startTime);
    final totalQuestions = 5 + 5 + 5 + 5 + 3 + 3; // = 26
    print('‚úÖ QuestionDB: Inserted $totalQuestions questions in 6 sets in ${duration.inMilliseconds}ms');
  }

  /// ‡∏î‡∏∂‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
  Future<List<String>> getRandomQuestionSet() async {
    final db = await database;
    
    print('üé≤ QuestionDB: Fetching random question set...');
    
    try {
      // ‡∏î‡∏∂‡∏á question set ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
      final setResult = await db.rawQuery('''
        SELECT id, title FROM question_sets 
        ORDER BY RANDOM() 
        LIMIT 1
      ''');

      if (setResult.isEmpty) {
        print('‚ùå QuestionDB: No question sets found');
        return [];
      }

      final setId = setResult.first['id'] as int;
      final setTitle = setResult.first['title'] as String;
      
      print('üìã QuestionDB: Selected set: $setTitle (ID: $setId)');

      final questions = await db.query(
        'questions',
        where: 'question_set_id = ?',
        whereArgs: [setId],
        orderBy: 'order_number ASC',
      );

      print('‚úÖ QuestionDB: Found ${questions.length} questions');

      return questions.map((q) => q['question_text'] as String).toList();
      
    } catch (e) {
      print('‚ùå QuestionDB: Error fetching questions: $e');
      return [];
    }
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏î
  Future<List<Map<String, dynamic>>> getQuestionsBySetId(int setId) async {
    final db = await database;
    return await db.query(
      'questions',
      where: 'question_set_id = ?',
      whereArgs: [setId],
      orderBy: 'order_number ASC',
    );
  }

  /// ‡∏î‡∏∂‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<Map<String, dynamic>>> getAllQuestionSets() async {
    final db = await database;
    return await db.query('question_sets', orderBy: 'id ASC');
  }

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  Future<int> addQuestionSet(String title) async {
    final db = await database;
    return await db.insert('question_sets', {
      'title': title,
      'created_at': DateTime.now().toIso8601String(),
    });
  }

  /// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
  Future<int> addQuestion(int setId, String questionText, int orderNumber) async {
    final db = await database;
    return await db.insert('questions', {
      'question_set_id': setId,
      'question_text': questionText,
      'order_number': orderNumber,
      'created_at': DateTime.now().toIso8601String(),
    });
  }

  Future<void> close() async {
    final db = await database;
    await db.close();
  }
}