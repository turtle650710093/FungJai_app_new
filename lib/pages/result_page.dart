import 'package:flutter/material.dart';
import 'package:fungjai_app_new/services/prediction_result.dart';
import 'package:url_launcher/url_launcher.dart';
import 'dart:math';

class ResultPage extends StatelessWidget {
  final PredictionResult analysisResult;
  final bool isLastQuestion;
  final VoidCallback onNext;

  const ResultPage({
    super.key,
    required this.analysisResult,
    required this.isLastQuestion,
    required this.onNext,
  });

  String _translateEmotion(String emotion) {
    const emotionMap = {
      'happy': '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç',
      'sad': '‡πÄ‡∏®‡∏£‡πâ‡∏≤',
      'angry': '‡πÇ‡∏Å‡∏£‡∏ò',
      'neutral': '‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏â‡∏¢‡πÜ',
      'frustrated': '‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î',
    };
    return emotionMap[emotion.toLowerCase()] ?? emotion;
  }

  // ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  String _getRandomComfortMessage(String emotion) {
    final random = Random();

    final messages = {
      'happy': [
        '‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏ß‡∏Å‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠  ',
        '‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πÉ‡∏ô‡πÉ‡∏à‡∏ô‡∏≤‡∏ô ‡πÜ ‡∏ô‡∏∞‡∏Ñ‡∏∞',
        '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏ß‡∏ß‡∏ï‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏≠‡∏¢‡∏π‡πà ‡∏Ç‡∏≠‡πÉ‡∏´‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏ô‡∏≤‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ',
        '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞ ',
      ],
      'sad': [
        '‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡∏î‡πÉ‡∏™ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠ ',
        '‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÄ‡∏õ‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ä‡πâ‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡∏∂‡πâ‡∏á ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ú‡πâ‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢',
        '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏π‡∏™‡∏∂‡∏Å‡πÄ‡∏ä‡πà‡∏ô‡∏ô‡∏±‡πâ‡∏ô',
        '‡∏ß‡∏±‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡πÄ‡∏£‡∏≤‡πÅ‡∏Ñ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ',
      ],
      'angry': [
        '‡∏£‡∏π‡πâ‡∏π‡∏ß‡πà‡∏≤‡∏ö‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à ‡∏•‡∏≠‡∏á‡∏ù‡∏∂‡∏Å‡∏•‡∏°‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏ï‡∏≤‡∏°‡∏Ñ‡∏•‡∏¥‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞',
        '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≤‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ô‡∏±‡πâ‡∏ô ‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏±‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞',
        '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πÇ‡∏Å‡∏£‡∏ò‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≤‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞',
        '‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏ô‡∏µ‡πâ‡∏Ñ‡∏≠‡∏¢ ‡πÜ ‡∏Ñ‡∏•‡∏≤‡∏¢‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞',
      ],
      'neutral': [
        '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤ ‡πÅ‡∏°‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÅ‡∏ï‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞ ',
        '‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏î‡∏π‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÜ ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÉ‡∏à‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞',
        '‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏î‡∏π‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞',
        '‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ö‡∏≤‡∏¢',
      ],
      'frustrated': [
        '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏á‡∏£‡∏µ‡∏ö‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ñ‡πà‡∏∞',
        '‡πÅ‡∏°‡πâ‡πÉ‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏á‡∏ö‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠ ‡∏û‡∏±‡∏Å‡πÉ‡∏à‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞',
        '‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏±‡∏á‡∏ß‡∏•‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏™‡πà‡πÉ‡∏à ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏•‡∏≥‡∏û‡∏±‡∏á',
        '‡∏•‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏™‡∏±‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏ñ‡πâ‡∏≤‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡πâ‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ñ‡πà‡∏∞',
      ],
    };

    final messageList =
        messages[emotion.toLowerCase()] ?? ['‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞'];
    return messageList[random.nextInt(messageList.length)];
  }

  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube
  List<Map<String, String>> _getActivities(String emotion) {
    final activities = {
      'happy': [
        {
          'name': '‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡πÇ‡∏£‡∏ö‡∏¥‡∏Ñ‡∏™‡∏ô‡∏∏‡∏Å‡πÜ',
          'url': 'https://www.youtube.com/watch?v=gCzgc_RelEg',
          'icon': 'üíÉ',
        },
        {
          'name': '‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡∏î',
          'url': 'https://www.youtube.com/watch?v=h-nRx6O4Bis',
          'icon': 'üç≥',
        },
        {
          'name': '‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏ô‡∏∏‡∏Å‡πÜ',
          'url': 'https://www.youtube.com/watch?v=Zi_XLOBDo_Y',
          'icon': 'üéµ',
        },
      ],
      'sad': [
        {
          'name': '‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡∏ö‡∏≥‡∏ö‡∏±‡∏î ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏à‡∏¥‡∏ï‡πÉ‡∏à',
          'url': 'https://www.youtube.com/watch?v=inpok4MKVLM',
          'icon': 'üßò',
        },
        {
          'name': '‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏ö‡∏≤‡πÜ ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢',
          'url': 'https://www.youtube.com/watch?v=lTRiuFIWV54',
          'icon': 'üé∂',
        },
        {
          'name': '‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏ï‡∏•‡∏Å ‡∏¢‡∏Å‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå',
          'url': 'https://www.youtube.com/watch?v=f3OWi1huY0k',
          'icon': 'üòÇ',
        },
      ],
      'angry': [
        {
          'name': '‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏Å‡∏£‡∏ò',
          'url': 'https://www.youtube.com/watch?v=DbDoBzGY3vo',
          'icon': 'üòÆ‚Äçüí®',
        },
        {
          'name': '‡πÇ‡∏¢‡∏Ñ‡∏∞‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢',
          'url': 'https://www.youtube.com/watch?v=v7AYKMP6rOE',
          'icon': 'üßò‚Äç‚ôÄÔ∏è',
        },
        {
          'name': '‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥',
          'url': 'https://www.youtube.com/watch?v=d5gUsc4M7I8',
          'icon': 'üå≥',
        },
      ],
      'neutral': [
        {
          'name': '‡∏¢‡∏∑‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏¢‡∏∑‡∏î‡∏™‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ',
          'url': 'https://www.youtube.com/watch?v=qULTwquOuT4',
          'icon': 'ü§∏',
        },
        {
          'name': '‡∏ü‡∏±‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏∞ ‡∏õ‡∏•‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏•‡∏°‡∏à‡∏¥‡∏ï‡πÉ‡∏à',
          'url': 'https://www.youtube.com/watch?v=XqkLeT6Z7mQ',
          'icon': 'üôè',
        },
        {
          'name': '‡∏á‡∏≤‡∏ô‡∏ù‡∏µ‡∏°‡∏∑‡∏≠‡∏á‡πà‡∏≤‡∏¢‡πÜ',
          'url': 'https://www.youtube.com/watch?v=0pVhrLXUU4k',
          'icon': '‚úÇÔ∏è',
        },
      ],
      'frustrated': [
        {
          'name': '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î',
          'url': 'https://www.youtube.com/watch?v=86HUcX8ZtAk',
          'icon': 'üòå',
        },
        {
          'name': '‡∏ô‡∏ß‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ',
          'url': 'https://www.youtube.com/watch?v=3LTvOLmhZNQ',
          'icon': 'üíÜ',
        },
        {
          'name': '‡∏î‡∏π‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°',
          'url': 'https://www.youtube.com/watch?v=1ZYbU82GVz4',
          'icon': 'üèûÔ∏è',
        },
      ],
    };

    return activities[emotion.toLowerCase()] ?? [];
  }

  Map<String, String>? _getRandomActivity(String emotion) {
    final allActivities = _getActivities(emotion);
    if (allActivities.isEmpty) return null;

    final random = Random();
    return allActivities[random.nextInt(allActivities.length)];
  }

  IconData _getEmotionIcon(String emotion) {
    const icons = {
      'happy': Icons.sentiment_very_satisfied_rounded,
      'sad': Icons.sentiment_very_dissatisfied_rounded,
      'angry': Icons.sentiment_dissatisfied_rounded,
      'neutral': Icons.sentiment_neutral_rounded,
      'frustrated': Icons.sentiment_dissatisfied_rounded,
    };
    return icons[emotion.toLowerCase()] ?? Icons.self_improvement_rounded;
  }

  Color _getEmotionColor(String emotion) {
    const colors = {
      'happy': Color(0xFF4CAF50),
      'sad': Colors.blueGrey,
      'angry': Colors.red,
      'neutral': Colors.teal,
      'frustrated': Colors.orange,
    };
    return colors[emotion.toLowerCase()] ?? Colors.teal;
  }

  Future<void> _launchURL(String url) async {
    final Uri uri = Uri.parse(url);
    if (!await launchUrl(uri, mode: LaunchMode.externalApplication)) {
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ: $url');
    }
  }

  @override
  Widget build(BuildContext context) {
    final topEmotion = analysisResult.emotion;
    final confidence = analysisResult.confidence;
    final comfortMessage = _getRandomComfortMessage(topEmotion);
    final activity = _getRandomActivity(topEmotion);
    final emotionIcon = _getEmotionIcon(topEmotion);
    final emotionColor = _getEmotionColor(topEmotion);

    return Scaffold(
      backgroundColor: const Color(0xFFFFFBF5),
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        foregroundColor: const Color(0xFF2D5F5F),
        centerTitle: true,
        automaticallyImplyLeading: false,
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              const SizedBox(height: 24),

              // Emotion Result
              Icon(emotionIcon, size: 80, color: emotionColor),
              const SizedBox(height: 16),
              Text(
                '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 18, color: Colors.grey.shade600),
              ),
              const SizedBox(height: 8),
              Text(
                '${_translateEmotion(topEmotion)}',
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey.shade800,
                ),
              ),

              const SizedBox(height: 24),

              // Comfort Message
              Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: emotionColor.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(
                    color: emotionColor.withOpacity(0.3),
                    width: 2,
                  ),
                ),
                child: Text(
                  comfortMessage,
                  textAlign: TextAlign.center,
                  style: const TextStyle(
                    fontSize: 16,
                    height: 1.6,
                    color: Colors.black87,
                  ),
                ),
              ),

              const SizedBox(height: 32),

              // Activities Section
              if (activity != null) ...[
                Row(
                  children: [
                    Icon(
                      Icons.lightbulb_outline,
                      color: emotionColor,
                      size: 24,
                    ),
                    const SizedBox(width: 8),
                    const Text(
                      '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2D5F5F),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),

                _buildActivityCard(
                  activity['name']!,
                  activity['icon']!,
                  activity['url']!,
                  emotionColor,
                  context,
                ),
              ],

              const SizedBox(height: 32),

              // Next Button
              SizedBox(
                height: 56,
                child: ElevatedButton(
                  onPressed: onNext,
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF2D5F5F),
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    elevation: 2,
                  ),
                  child: Text(
                    isLastQuestion ? '‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•' : '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildActivityCard(
    String name,
    String icon,
    String url,
    Color color,
    BuildContext context,
  ) {
    return Card(
      elevation: 2,
      margin: const EdgeInsets.only(bottom: 12),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () async {
          try {
            await _launchURL(url);
          } catch (e) {
            if (context.mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ: $e'),
                  backgroundColor: Colors.red,
                ),
              );
            }
          }
        },
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              Container(
                width: 50,
                height: 50,
                decoration: BoxDecoration(
                  color: color.withOpacity(0.15),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Center(
                  child: Text(icon, style: const TextStyle(fontSize: 28)),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Text(
                  name,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
              Icon(Icons.play_circle_outline, color: color, size: 28),
            ],
          ),
        ),
      ),
    );
  }
}
