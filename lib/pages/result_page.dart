import 'package:flutter/material.dart';
import 'package:fungjai_app_new/services/prediction_result.dart';

String _getEmotionIcon(String emotion) {
  switch (emotion.toLowerCase()) {
    case 'angry': return 'üò°';
    case 'frustrated': return 'üò§';  
    case 'happy': return 'üòä';
    case 'neutral': return 'üòê';
    case 'sad': return 'üò¢';
    default: return 'ü§î';
  }
}

String _getEmotionColorName(String emotion) {
  switch (emotion.toLowerCase()) {
    case 'angry': return '‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°';
    case 'frustrated': return '‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏°';
    case 'happy': return '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏™‡∏î‡πÉ‡∏™';
    case 'neutral': return '‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô';
    case 'sad': return '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°';
    default: return '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
  }
}
class ResultPage extends StatelessWidget {
  final PredictionResult analysisResult;
  final bool isLastQuestion; // ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢/‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  final VoidCallback onNext; // Callback ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°

  const ResultPage({
    super.key,
    required this.analysisResult,
    required this.isLastQuestion,
    required this.onNext,
  });

  String _translateEmotion(String emotion) {
    const emotionMap = {
      'happy': '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç', 'sad': '‡πÄ‡∏®‡∏£‡πâ‡∏≤', 'angry': '‡πÇ‡∏Å‡∏£‡∏ò',
      'neutral': '‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏â‡∏¢‡πÜ', 'frustrated': '‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î',
    };
    return emotionMap[emotion.toLowerCase()] ?? emotion;
  }

  String _getComfortMessage(String emotion) {
    const messages = {
      'happy': '‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞! ‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏£‡∏≠‡∏ö‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞',
      'sad': '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏∏‡πà‡∏ô‡πÜ ‡∏î‡∏∑‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞',
      'angry': '‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÜ ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏∂‡∏Å‡πÜ ‡∏ä‡πâ‡∏≤‡πÜ ‡∏ô‡∏±‡∏ö 1 ‡∏ñ‡∏∂‡∏á 10 ‡πÉ‡∏ô‡πÉ‡∏à ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞',
      'neutral': '‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏â‡∏¢‡πÜ ‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏î‡∏π‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ',
      'frustrated': '‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ ‡∏•‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏ó‡∏≥‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏∞',
    };
    return messages[emotion.toLowerCase()] ?? '‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞';
  }

  IconData _getEmotionIcon(String emotion) {
    const icons = {
      'happy': Icons.sentiment_very_satisfied_rounded, 'sad': Icons.sentiment_very_dissatisfied_rounded,
      'angry': Icons.sentiment_dissatisfied_rounded, 'neutral': Icons.sentiment_neutral_rounded,
      'frustrated': Icons.sentiment_dissatisfied_rounded,
    };
    return icons[emotion.toLowerCase()] ?? Icons.self_improvement_rounded;
  }

  Color _getEmotionColor(String emotion) {
     const colors = {
      'happy': Color(0xFF1B7070), 'sad': Colors.blueGrey,
      'angry': Colors.red, 'neutral': Colors.teal, 'frustrated': Colors.orange,
    };
    return colors[emotion.toLowerCase()] ?? Colors.teal;
  }


  @override
  Widget build(BuildContext context) {
    final topEmotion = analysisResult.emotion;
    final confidence = analysisResult.confidence;

    final comfortMessage = _getComfortMessage(topEmotion);
    final emotionIcon = _getEmotionIcon(topEmotion);
    final emotionColor = _getEmotionColor(topEmotion);

    return Scaffold(
      backgroundColor: const Color(0xFFF5F5DC),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Card(
                elevation: 4,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                child: Padding(
                  padding: const EdgeInsets.all(20.0),
                  child: Column(
                    children: [
                      const Text('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå', style: TextStyle(fontSize: 18, color: Colors.black54)),
                      const SizedBox(height: 8),
                      Text(
                        '${(confidence * 100).toStringAsFixed(0)}%',
                        style: const TextStyle(
                          fontSize: 56, fontWeight: FontWeight.bold, color: Color(0xFF1B7070),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 32),

              Icon(emotionIcon, size: 80, color: emotionColor),
              const SizedBox(height: 8),
              Text(
                '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å "${_translateEmotion(topEmotion)}"',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: Colors.grey.shade800),
              ),
              const SizedBox(height: 24),

              Text(
                comfortMessage,
                textAlign: TextAlign.center,
                style: const TextStyle(fontSize: 16, height: 1.5, color: Colors.black87),
              ),
              const Spacer(),

              // [ADD THIS] ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö Dynamic
              ElevatedButton(
                onPressed: onNext, // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ callback ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF1B7070),
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                ),
                child: Text(
                  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                  isLastQuestion ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
                  style: const TextStyle(fontSize: 18),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}