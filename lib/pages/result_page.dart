import 'dart:io';
import 'dart:async';
import 'dart:math'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
import 'package:flutter/material.dart';
import 'package:just_audio/just_audio.dart';
import 'package:fungjai_app_new/services/prediction_result.dart';
import 'package:url_launcher/url_launcher.dart';

class ResultPage extends StatefulWidget {
  final PredictionResult analysisResult;
  final bool isLastQuestion;
  final VoidCallback onNext;
  final bool isFromStoryTelling;

  const ResultPage({
    super.key,
    required this.analysisResult,
    required this.isLastQuestion,
    required this.onNext,
    this.isFromStoryTelling = false,
  });

  @override
  State<ResultPage> createState() => _ResultPageState();
}

class _ResultPageState extends State<ResultPage> {
  final AudioPlayer _audioPlayer = AudioPlayer();
  
  bool _isPlayingAudio = false;
  bool _hasPlayedOnce = false; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  bool _isDisposed = false;
  
  String _comfortMessage = '';
  String? _audioFilePath;
  int _selectedMessageIndex = 0;
  
  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
  Map<String, String>? _selectedActivity;

  @override
  void initState() {
    super.initState();
    _selectRandomMessage();
    _selectRandomActivity(); // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    _initAudio();
  }

  @override
  void dispose() {
    print('ResultPage: Disposing...');
    _isDisposed = true;
    _audioPlayer.dispose();
    print('ResultPage: Disposed successfully');
    super.dispose();
  }

  // ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô
  void _selectRandomMessage() {
    final random = Random();
    final emotion = widget.analysisResult.emotion.toLowerCase();

    final messageList = _getComfortMessageList(emotion);
    _selectedMessageIndex = random.nextInt(messageList.length);
    _comfortMessage = messageList[_selectedMessageIndex]['text']!;
    _audioFilePath = messageList[_selectedMessageIndex]['audio']!;
    
    print('üìù Emotion: $emotion');
    print('üìù Selected message index: $_selectedMessageIndex');
    print('üìù Message: $_comfortMessage');
    print('üîä Audio file: $_audioFilePath');
  }

  // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  void _selectRandomActivity() {
    final emotion = widget.analysisResult.emotion.toLowerCase();
    final allActivities = _getActivities(emotion);
    
    if (allActivities.isEmpty) {
      _selectedActivity = null;
      print('‚ùå No activities for emotion: $emotion');
    } else {
      final random = Random();
      _selectedActivity = allActivities[random.nextInt(allActivities.length)];
      print('üéØ Selected activity: ${_selectedActivity!['name']}');
    }
  }

  // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô
  List<Map<String, String>> _getComfortMessageList(String emotion) {
    final messages = {
      'happy': [
        {
          'text': '‡∏î‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏ß‡∏Å‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠',
          'audio': 'assets/audio/comfort/happy1.m4a',
        },
        {
          'text': '‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÉ‡∏à‡∏ô‡∏≤‡∏ô ‡πÜ ‡∏ô‡∏∞‡∏Ñ‡∏∞',
          'audio': 'assets/audio/comfort/happy2.m4a',
        },
        {
          'text': '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡πÅ‡∏ß‡∏ß‡∏ï‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏≠‡∏¢‡∏π‡πà ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏ô‡∏≤‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞',
          'audio': 'assets/audio/comfort/happy3.m4a',
        },
        {
          'text': '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞',
          'audio': 'assets/audio/comfort/happy4.m4a',
        },
      ],
      'sad': [
        {
          'text': '‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡∏î‡πÉ‡∏™ ‡πÅ‡∏ï‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏ü‡∏±‡∏á‡πÉ‡∏à‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠',
          'audio': 'assets/audio/comfort/sad1.m4a',
        },
        {
          'text': '‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢',
          'audio': 'assets/audio/comfort/sad2.m4a',
        },
        {
          'text': '‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏´‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏à‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏ä‡πà‡∏ô‡∏ô‡∏±‡πâ‡∏ô',
          'audio': 'assets/audio/comfort/sad3.m4a',
        },
        {
          'text': '‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡πÄ‡∏£‡∏≤‡πÅ‡∏Ñ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ó‡πà‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
          'audio': 'assets/audio/comfort/sad4.m4a',
        },
      ],
      'angry': [
        {
          'text': '‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ö‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à ‡∏•‡∏≠‡∏á‡∏ù‡∏∂‡∏Å‡∏•‡∏°‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏û‡∏±‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞',
          'audio': 'assets/audio/comfort/angry1.m4a',
        },
        {
          'text': '‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≤‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ô‡∏±‡πâ‡∏ô ‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏±‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞',
          'audio': 'assets/audio/comfort/angry2.m4a',
        },
        {
          'text': '‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÇ‡∏Å‡∏£‡∏ò‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πâ‡∏≤‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞',
          'audio': 'assets/audio/comfort/angry3.m4a',
        },
        {
          'text': '‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏Ñ‡∏•‡∏≤‡∏¢‡∏•‡∏á‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏≠‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞',
          'audio': 'assets/audio/comfort/angry4.m4a',
        },
      ],
      'neutral': [
        {
          'text': '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÉ‡∏à ‡πÅ‡∏°‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÅ‡∏ï‡πà‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞',
          'audio': 'assets/audio/comfort/neutral1.m4a',
        },
        {
          'text': '‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏î‡∏π‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÜ ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÉ‡∏à‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞',
          'audio': 'assets/audio/comfort/neutral2.m4a',
        },
        {
          'text': '‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏î‡∏π‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞',
          'audio': 'assets/audio/comfort/neutral3.m4a',
        },
        {
          'text': '‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö ‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ö‡∏≤‡∏¢',
          'audio': 'assets/audio/comfort/neutral4.m4a',
        },
      ],
      'frustrated': [
        {
          'text': '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡∏ö‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏Ñ‡πà‡∏∞',
          'audio': 'assets/audio/comfort/frustrated1.m4a',
        },
        {
          'text': '‡πÅ‡∏°‡πâ‡πÉ‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏á‡∏ö‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏°‡∏≠ ‡∏û‡∏±‡∏Å‡πÉ‡∏à‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞',
          'audio': 'assets/audio/comfort/frustrated2.m4a',
        },
        {
          'text': '‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏±‡∏á‡∏ß‡∏•‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏™‡πà‡πÉ‡∏à ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏•‡∏≥‡∏û‡∏±‡∏á',
          'audio': 'assets/audio/comfort/frustrated3.m4a',
        },
        {
          'text': '‡∏•‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏™‡∏±‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏ñ‡πâ‡∏≤‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏Å‡πâ‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏Ñ‡πà‡∏∞',
          'audio': 'assets/audio/comfort/frustrated4.m4a',
        },
      ],
    };

    return messages[emotion] ?? [
      {
        'text': '‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ô‡∏∞‡∏Ñ‡∏∞',
        'audio': 'assets/audio/comfort/default.m4a',
      }
    ];
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AudioPlayer
  Future<void> _initAudio() async {
    // ‚úÖ ‡∏ü‡∏±‡∏á state changes ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ completed state
    _audioPlayer.playerStateStream.listen((state) {
      if (!mounted || _isDisposed) return;
      
      // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ completed ‡∏Å‡πà‡∏≠‡∏ô - ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô replay
      if (state.processingState == ProcessingState.completed) {
        print('‚úÖ Audio playback completed');
        if (mounted && !_isDisposed) {
          setState(() {
            _isPlayingAudio = false;
            _hasPlayedOnce = true; // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß
          });
        }
      } else {
        if (mounted && !_isDisposed) {
          setState(() {
            _isPlayingAudio = state.playing;
          });
        }
      }
    });

    // ‚úÖ ‡∏•‡∏ö auto-play ‡∏≠‡∏≠‡∏Å - ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡πÄ‡∏≠‡∏á
  }

  // ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏•‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏•‡∏°
  Future<void> _playComfortAudio() async {
    if (_audioFilePath == null || _isDisposed) {
      print('‚ùå No audio file path or disposed');
      return;
    }

    try {
      print('üîä Playing comfort audio: $_audioFilePath');
      
      await _audioPlayer.stop();
      await _audioPlayer.setAsset(_audioFilePath!);
      await _audioPlayer.setVolume(1.0);
      await _audioPlayer.play();
      
      if (mounted && !_isDisposed) {
        setState(() {
          _isPlayingAudio = true;
          _hasPlayedOnce = true;
        });
      }
      
      print('‚úÖ Audio playback started');
      
    } catch (e, stackTrace) {
      print('‚ùå Error playing audio: $e');
      print('   Stack trace: $stackTrace');
      
      if (mounted && !_isDisposed) {
        setState(() {
          _isPlayingAudio = false;
        });
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ\n‡πÑ‡∏ü‡∏•‡πå: $_audioFilePath'),
            backgroundColor: Colors.orange,
            duration: const Duration(seconds: 3),
          ),
        );
      }
    }
  }

  // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  Future<void> _stopComfortAudio() async {
    try {
      print('üõë Stopping audio...');
      await _audioPlayer.stop();
      
      if (mounted && !_isDisposed) {
        setState(() {
          _isPlayingAudio = false;
        });
      }
      print('‚úÖ Audio stopped');
    } catch (e) {
      print('‚ùå Error stopping audio: $e');
    }
  }

  String _translateEmotion(String emotion) {
    const emotionMap = {
      'happy': '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç',
      'sad': '‡πÄ‡∏®‡∏£‡πâ‡∏≤',
      'angry': '‡πÇ‡∏Å‡∏£‡∏ò',
      'neutral': '‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏â‡∏¢‡πÜ',
      'frustrated': '‡∏´‡∏á‡∏∏‡∏î‡∏´‡∏á‡∏¥‡∏î',
    };
    return emotionMap[emotion.toLowerCase()] ?? emotion;
  }

  @override
  Widget build(BuildContext context) {
    final topEmotion = widget.analysisResult.emotion;
    final emotionIcon = _getEmotionIcon(topEmotion);
    final emotionColor = _getEmotionColor(topEmotion);

    return WillPopScope(
      onWillPop: () async {
        print('‚¨ÖÔ∏è ResultPage: Back button pressed');
        await _stopComfortAudio();
        await Future.delayed(const Duration(milliseconds: 200));
        return true;
      },
      child: Scaffold(
        backgroundColor: const Color(0xFFFFFBF5),
        appBar: AppBar(
          backgroundColor: Colors.white,
          elevation: 0,
          foregroundColor: const Color(0xFF2D5F5F),
          centerTitle: true,
          automaticallyImplyLeading: false,
        ),
        body: SafeArea(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                const SizedBox(height: 24),

                // Emotion Result
                Icon(emotionIcon, size: 80, color: emotionColor),
                const SizedBox(height: 16),
                Text(
                  '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å',
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 18, color: Colors.grey.shade600),
                ),
                const SizedBox(height: 8),
                Text(
                  _translateEmotion(topEmotion),
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.grey.shade800,
                  ),
                ),

                const SizedBox(height: 24),

                // Comfort Message Container
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: emotionColor.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: emotionColor.withOpacity(0.3),
                      width: 2,
                    ),
                  ),
                  child: Column(
                    children: [
                      // Icon ‡πÄ‡∏™‡∏µ‡∏¢‡∏á
                      if (_isPlayingAudio)
                        Padding(
                          padding: const EdgeInsets.only(bottom: 12),
                          child: Icon(
                            Icons.volume_up,
                            color: emotionColor,
                            size: 32,
                          ),
                        ),
                      
                      // Message Text
                      Text(
                        _comfortMessage,
                        textAlign: TextAlign.center,
                        style: const TextStyle(
                          fontSize: 16,
                          height: 1.6,
                          color: Colors.black87,
                        ),
                      ),
                      
                      // Status indicator
                      if (_isPlayingAudio)
                        Padding(
                          padding: const EdgeInsets.only(top: 12),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              SizedBox(
                                width: 12,
                                height: 12,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  color: emotionColor,
                                ),
                              ),
                              const SizedBox(width: 8),
                              Text(
                                '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á...',
                                style: TextStyle(
                                  fontSize: 12,
                                  color: emotionColor,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                            ],
                          ),
                        ),
                    ],
                  ),
                ),

                const SizedBox(height: 20),

                // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏ü‡∏±‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô/‡∏ü‡∏±‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                    if (!_isPlayingAudio)
                      ElevatedButton.icon(
                        onPressed: _playComfortAudio,
                        icon: Icon(
                          _hasPlayedOnce ? Icons.replay : Icons.play_arrow,
                          size: 22,
                        ),
                        label: Text(
                          _hasPlayedOnce ? '‡∏ü‡∏±‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' : '‡∏ü‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
                          style: const TextStyle(
                            fontSize: 15,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: emotionColor,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(
                            horizontal: 24,
                            vertical: 12,
                          ),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                          elevation: 2,
                        ),
                      ),

                    // ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏¢‡∏∏‡∏î
                    if (_isPlayingAudio)
                      ElevatedButton.icon(
                        onPressed: _stopComfortAudio,
                        icon: const Icon(Icons.stop, size: 22),
                        label: const Text(
                          '‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á',
                          style: TextStyle(
                            fontSize: 15,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.red.shade600,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(
                            horizontal: 24,
                            vertical: 12,
                          ),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                          elevation: 2,
                        ),
                      ),
                  ],
                ),

                const SizedBox(height: 32),

                // Activities Section
                if (_selectedActivity != null) ...[
                  Row(
                    children: [
                      Icon(
                        Icons.lightbulb_outline,
                        color: emotionColor,
                        size: 24,
                      ),
                      const SizedBox(width: 8),
                      const Text(
                        '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF2D5F5F),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),

                  _buildActivityCard(
                    _selectedActivity!['name']!,
                    _selectedActivity!['icon']!,
                    _selectedActivity!['url']!,
                    emotionColor,
                    context,
                  ),
                ],

                const SizedBox(height: 32),

                // Next Button
                SizedBox(
                  height: 56,
                  child: ElevatedButton(
                    onPressed: _handleNext,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF2D5F5F),
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                      elevation: 2,
                    ),
                    child: Text(
                      widget.isLastQuestion ? '‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•' : '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Future<void> _handleNext() async {
    print('‚û°Ô∏è ResultPage: Navigating to next page...');
    
    await _stopComfortAudio();
    await Future.delayed(const Duration(milliseconds: 200));
    
    widget.onNext();
  }

  Widget _buildActivityCard(
    String name,
    String icon,
    String url,
    Color color,
    BuildContext context,
  ) {
    return Card(
      elevation: 2,
      margin: const EdgeInsets.only(bottom: 12),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () async {
          await _stopComfortAudio();
          await Future.delayed(const Duration(milliseconds: 200));
          
          try {
            await _launchURL(url);
          } catch (e) {
            if (context.mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ: $e'),
                  backgroundColor: Colors.red,
                ),
              );
            }
          }
        },
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Row(
            children: [
              Container(
                width: 50,
                height: 50,
                decoration: BoxDecoration(
                  color: color.withOpacity(0.15),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Center(
                  child: Text(icon, style: const TextStyle(fontSize: 28)),
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Text(
                  name,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
              Icon(Icons.play_circle_outline, color: color, size: 28),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _launchURL(String url) async {
    final Uri uri = Uri.parse(url);
    if (!await launchUrl(uri, mode: LaunchMode.externalApplication)) {
      throw Exception('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ: $url');
    }
  }

  IconData _getEmotionIcon(String emotion) {
    const icons = {
      'happy': Icons.sentiment_very_satisfied_rounded,
      'sad': Icons.sentiment_very_dissatisfied_rounded,
      'angry': Icons.sentiment_dissatisfied_rounded,
      'neutral': Icons.sentiment_neutral_rounded,
      'frustrated': Icons.sentiment_dissatisfied_rounded,
    };
    return icons[emotion.toLowerCase()] ?? Icons.self_improvement_rounded;
  }

  Color _getEmotionColor(String emotion) {
    const colors = {
      'happy': Color(0xFF4CAF50),
      'sad': Colors.blueGrey,
      'angry': Colors.red,
      'neutral': Colors.teal,
      'frustrated': Colors.orange,
    };
    return colors[emotion.toLowerCase()] ?? Colors.teal;
  }

  // ‚úÖ ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô _getRandomActivity ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô initState ‡πÅ‡∏•‡πâ‡∏ß

  List<Map<String, String>> _getActivities(String emotion) {
    final activities = {
      'happy': [
        {'name': '‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡πÇ‡∏£‡∏ö‡∏¥‡∏Ñ‡∏™‡∏ô‡∏∏‡∏Å‡πÜ', 'url': 'https://www.youtube.com/watch?v=gCzgc_RelEg', 'icon': 'üíÉ'},
        {'name': '‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏õ‡∏£‡∏î', 'url': 'https://www.youtube.com/watch?v=h-nRx6O4Bis', 'icon': 'üç≥'},
        {'name': '‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏ô‡∏∏‡∏Å‡πÜ', 'url': 'https://www.youtube.com/watch?v=Zi_XLOBDo_Y', 'icon': 'üéµ'},
      ],
      'sad': [
        {'name': '‡∏™‡∏°‡∏≤‡∏ò‡∏¥‡∏ö‡∏≥‡∏ö‡∏±‡∏î ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏à‡∏¥‡∏ï‡πÉ‡∏à', 'url': 'https://www.youtube.com/watch?v=inpok4MKVLM', 'icon': 'üßò'},
        {'name': '‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏ö‡∏≤‡πÜ ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢', 'url': 'https://www.youtube.com/watch?v=lTRiuFIWV54', 'icon': 'üé∂'},
        {'name': '‡∏î‡∏π‡∏´‡∏ô‡∏±‡∏á‡∏ï‡∏•‡∏Å', 'url': 'https://www.youtube.com/watch?v=f3OWi1huY0k', 'icon': 'üòÇ'},
      ],
      'angry': [
        {'name': '‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏∂‡∏Å‡πÜ ‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏Å‡∏£‡∏ò', 'url': 'https://www.youtube.com/watch?v=DbDoBzGY3vo', 'icon': 'üòÆ‚Äçüí®'},
        {'name': '‡πÇ‡∏¢‡∏Ñ‡∏∞‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢', 'url': 'https://www.youtube.com/watch?v=v7AYKMP6rOE', 'icon': 'üßò‚Äç‚ôÄÔ∏è'},
        {'name': '‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥', 'url': 'https://www.youtube.com/watch?v=d5gUsc4M7I8', 'icon': 'üå≥'},
      ],
      'neutral': [
        {'name': '‡∏¢‡∏∑‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏¢‡∏∑‡∏î‡∏™‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ', 'url': 'https://www.youtube.com/watch?v=qULTwquOuT4', 'icon': 'ü§∏'},
        {'name': '‡∏ü‡∏±‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏∞ ‡∏õ‡∏•‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏•‡∏°‡∏à‡∏¥‡∏ï‡πÉ‡∏à', 'url': 'https://www.youtube.com/watch?v=XqkLeT6Z7mQ', 'icon': 'üôè'},
        {'name': '‡∏á‡∏≤‡∏ô‡∏ù‡∏µ‡∏°‡∏∑‡∏≠‡∏á‡πà‡∏≤‡∏¢‡πÜ', 'url': 'https://www.youtube.com/watch?v=0pVhrLXUU4k', 'icon': '‚úÇÔ∏è'},
      ],
      'frustrated': [
        {'name': '‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î', 'url': 'https://www.youtube.com/watch?v=86HUcX8ZtAk', 'icon': 'üòå'},
        {'name': '‡∏ô‡∏ß‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ', 'url': 'https://www.youtube.com/watch?v=3LTvOLmhZNQ', 'icon': 'üíÜ'},
        {'name': '‡∏î‡∏π‡∏ó‡∏¥‡∏ß‡∏ó‡∏±‡∏®‡∏ô‡πå‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°', 'url': 'https://www.youtube.com/watch?v=1ZYbU82GVz4', 'icon': 'üèûÔ∏è'},
      ],
    };

    return activities[emotion.toLowerCase()] ?? [];
  }
}